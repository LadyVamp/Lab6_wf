//------------------------------------------------------------------------------
// CacheProvider version: 2016.2.1.803
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.5485
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace User {
    
    
    /// <summary>
    /// Projection of class User.Catalog
    /// </summary>
    public partial class Catalog : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "User.Catalog";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 20841;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(15);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(2);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static Catalog() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("User.Catalog", typeof(Catalog));
            ;
            User.Catalog.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("files", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tRelationship, 11723));
            User.Catalog.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("title", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            ;
            User.Catalog.CheckSumMethodDict.Add("IDKEYDelete", 46328);
            User.Catalog.CheckSumMethodDict.Add("IDKEYExists", 13237);
            User.Catalog.CheckSumMethodDict.Add("IDKEYOpen", 7371);
            User.Catalog.CheckSumMethodDict.Add("create", 48777);
            ;
        }
        
        /// <summary>Internal API</summary>
        public Catalog() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Catalog(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, User.Catalog.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public Catalog(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, User.Catalog.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property files
        /// </summary>
        public virtual InterSystems.Data.CacheTypes.CacheRelationshipObject files {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(InterSystems.Data.CacheTypes.CacheRelationshipObject));
                        this.GetPropertyS("files", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheRelationshipObject)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("files", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property title
        /// </summary>
        public virtual string title {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("title", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("title", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    User.Catalog.RunClassMethodS(conn, User.Catalog.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    User.Catalog.RunClassMethodS(conn, User.Catalog.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static User.Catalog IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(User.Catalog));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    User.Catalog.RunClassMethodS(conn, User.Catalog.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((User.Catalog)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method create
        /// </summary>
        public static User.Catalog create(InterSystems.Data.CacheClient.CacheConnection conn, string t, string a) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(User.Catalog));
                    mtdSignature.Add(t, false);
                    mtdSignature.Add(a, false);
                    User.Catalog.RunClassMethodS(conn, User.Catalog.ServerClassName, "create", mtdSignature);
                    return ((User.Catalog)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.Catalog Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.Catalog)(conn.OpenProxyObj(User.Catalog.ServerClassName, id, concurrency, typeof(User.Catalog), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.Catalog Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.Catalog)(conn.OpenProxyObj(User.Catalog.ServerClassName, id, typeof(User.Catalog), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.Catalog Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.Catalog)(conn.OpenProxyObj(User.Catalog.ServerClassName, id, typeof(User.Catalog))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.Catalog Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.Catalog)(conn.OpenProxyObj(User.Catalog.ServerClassName, id, concurrency, timeout, typeof(User.Catalog), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.Catalog Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.Catalog)(conn.OpenProxyObj(User.Catalog.ServerClassName, id, concurrency, typeof(User.Catalog), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.Catalog Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.Catalog)(conn.OpenProxyObj(User.Catalog.ServerClassName, id, concurrency, timeout, typeof(User.Catalog), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.Catalog Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.Catalog)(conn.OpenProxyObj(User.Catalog.ServerClassName, id, typeof(User.Catalog), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.Catalog OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.Catalog)(conn.OpenProxyObj(User.Catalog.ServerClassName, id, concurrency, typeof(User.Catalog), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.Catalog OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.Catalog)(conn.OpenProxyObj(User.Catalog.ServerClassName, id, typeof(User.Catalog), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.Catalog OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.Catalog)(conn.OpenProxyObj(User.Catalog.ServerClassName, id, typeof(User.Catalog))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.Catalog OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.Catalog)(conn.OpenProxyObj(User.Catalog.ServerClassName, id, concurrency, timeout, typeof(User.Catalog), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.Catalog OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.Catalog)(conn.OpenProxyObj(User.Catalog.ServerClassName, id, concurrency, typeof(User.Catalog), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.Catalog OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.Catalog)(conn.OpenProxyObj(User.Catalog.ServerClassName, id, concurrency, timeout, typeof(User.Catalog), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.Catalog OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.Catalog)(conn.OpenProxyObj(User.Catalog.ServerClassName, id, typeof(User.Catalog), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return User.Catalog.ExistsIdInternal(conn, User.Catalog.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return User.Catalog.DeleteIdInternal(conn, User.Catalog.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return User.Catalog.KillExtentInternal(conn, User.Catalog.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(User.Catalog.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            User.Catalog.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(User.Catalog.ServerClassName);
            if (metaInfo.Validate(User.Catalog.ClassCheckSum, User.Catalog.PropertyInfoColn, User.Catalog.CheckSumMethodDict, User.Catalog.CheckSumQueryDict, User.Catalog.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            User.Catalog.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((User.Catalog.AllPropertiesInfoColn != null)) {
                return User.Catalog.AllPropertiesInfoColn;
            }
            User.Catalog.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(User.Catalog.PropertyInfoColn);
            return User.Catalog.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return User.Catalog.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace User {
    
    
    /// <summary>
    /// Projection of class User.File
    /// </summary>
    public partial class File : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "User.File";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 20841;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(29);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(6);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static File() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("User.File", typeof(File));
            ;
            User.File.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("cat", InterSystems.Data.CacheTypes.ClientTypeId.tObject, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 2966));
            User.File.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("content", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            User.File.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("format", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            User.File.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("keywords", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            User.File.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("name", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            User.File.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("size", InterSystems.Data.CacheTypes.ClientTypeId.tDouble, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 23157));
            ;
            User.File.CheckSumMethodDict.Add("IDKEYDelete", 46328);
            User.File.CheckSumMethodDict.Add("IDKEYExists", 13237);
            User.File.CheckSumMethodDict.Add("IDKEYOpen", 52334);
            User.File.CheckSumMethodDict.Add("calcSize", 63506);
            ;
        }
        
        /// <summary>Internal API</summary>
        public File() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public File(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, User.File.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public File(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, User.File.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property cat
        /// </summary>
        public virtual User.Catalog cat {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, typeof(User.Catalog));
                        this.GetPropertyS("cat", mtdSignature);
                        return ((User.Catalog)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, this.Connection, null, false);
                        this.SetPropertyS("cat", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property content
        /// </summary>
        public virtual string content {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("content", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("content", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property format
        /// </summary>
        public virtual string format {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("format", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("format", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property keywords
        /// </summary>
        public virtual string keywords {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("keywords", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("keywords", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property name
        /// </summary>
        public virtual string name {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("name", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("name", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property size
        /// </summary>
        public virtual System.Nullable<double> size {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDouble);
                        this.GetPropertyS("size", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("size", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    User.File.RunClassMethodS(conn, User.File.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    User.File.RunClassMethodS(conn, User.File.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static User.File IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(User.File));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    User.File.RunClassMethodS(conn, User.File.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((User.File)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method calcSize
        /// </summary>
        public virtual System.Nullable<double> calcSize() {
            try {
                System.Threading.Monitor.Enter(this.Connection);
                this.AssertIsConnected();
                this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tDouble);
                    this.RunMethodS("calcSize", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheDoubleReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    this.Connection.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(this.Connection);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.File Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.File)(conn.OpenProxyObj(User.File.ServerClassName, id, concurrency, typeof(User.File), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.File Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.File)(conn.OpenProxyObj(User.File.ServerClassName, id, typeof(User.File), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.File Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.File)(conn.OpenProxyObj(User.File.ServerClassName, id, typeof(User.File))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.File Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.File)(conn.OpenProxyObj(User.File.ServerClassName, id, concurrency, timeout, typeof(User.File), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.File Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.File)(conn.OpenProxyObj(User.File.ServerClassName, id, concurrency, typeof(User.File), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.File Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.File)(conn.OpenProxyObj(User.File.ServerClassName, id, concurrency, timeout, typeof(User.File), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.File Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.File)(conn.OpenProxyObj(User.File.ServerClassName, id, typeof(User.File), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.File OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.File)(conn.OpenProxyObj(User.File.ServerClassName, id, concurrency, typeof(User.File), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.File OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.File)(conn.OpenProxyObj(User.File.ServerClassName, id, typeof(User.File), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.File OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.File)(conn.OpenProxyObj(User.File.ServerClassName, id, typeof(User.File))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.File OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.File)(conn.OpenProxyObj(User.File.ServerClassName, id, concurrency, timeout, typeof(User.File), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.File OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.File)(conn.OpenProxyObj(User.File.ServerClassName, id, concurrency, typeof(User.File), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.File OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.File)(conn.OpenProxyObj(User.File.ServerClassName, id, concurrency, timeout, typeof(User.File), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.File OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.File)(conn.OpenProxyObj(User.File.ServerClassName, id, typeof(User.File), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return User.File.ExistsIdInternal(conn, User.File.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return User.File.DeleteIdInternal(conn, User.File.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return User.File.KillExtentInternal(conn, User.File.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(User.File.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            User.File.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(User.File.ServerClassName);
            if (metaInfo.Validate(User.File.ClassCheckSum, User.File.PropertyInfoColn, User.File.CheckSumMethodDict, User.File.CheckSumQueryDict, User.File.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            User.File.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((User.File.AllPropertiesInfoColn != null)) {
                return User.File.AllPropertiesInfoColn;
            }
            User.File.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(User.File.PropertyInfoColn);
            return User.File.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return User.File.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
namespace User {
    
    
    /// <summary>
    /// Projection of class User.SearchPattern
    /// </summary>
    public partial class SearchPattern : InterSystems.Data.CacheTypes.CachePersistent {
        
        /// <summary>Server class name</summary>
        public const string ServerClassName = "User.SearchPattern";
        
        /// <summary>Meta information checksum</summary>
        public const long ClassCheckSum = 20841;
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumMethodDict = new System.Collections.Generic.Dictionary<string, int>(25);
        
        private static System.Collections.Generic.Dictionary<string, int> CheckSumQueryDict = new System.Collections.Generic.Dictionary<string, int>(1);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> PropertyInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(3);
        
        private static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> AllPropertiesInfoColn;
        
        static SearchPattern() {
            InterSystems.Data.CacheClient.CacheConnection.AddClientTypeDescr("User.SearchPattern", typeof(SearchPattern));
            ;
            User.SearchPattern.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("action", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            User.SearchPattern.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("compare", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            User.SearchPattern.PropertyInfoColn.Add(new InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo("regexp", InterSystems.Data.CacheTypes.ClientTypeId.tString, InterSystems.Data.CacheTypes.ClientObjTypeId.tUnknown, 1518));
            ;
            User.SearchPattern.CheckSumMethodDict.Add("IDKEYDelete", 46328);
            User.SearchPattern.CheckSumMethodDict.Add("IDKEYExists", 13237);
            User.SearchPattern.CheckSumMethodDict.Add("IDKEYOpen", 39970);
            User.SearchPattern.CheckSumMethodDict.Add("create", 38701);
            User.SearchPattern.CheckSumMethodDict.Add("delete", 28479);
            User.SearchPattern.CheckSumMethodDict.Add("read", 28479);
            User.SearchPattern.CheckSumMethodDict.Add("regexpIndexDelete", 34248);
            User.SearchPattern.CheckSumMethodDict.Add("regexpIndexExists", 10116);
            User.SearchPattern.CheckSumMethodDict.Add("regexpIndexOpen", 28332);
            User.SearchPattern.CheckSumMethodDict.Add("update", 59302);
            ;
        }
        
        /// <summary>Internal API</summary>
        public SearchPattern() {
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public SearchPattern(InterSystems.Data.CacheClient.CacheConnection conn, params object[] args) {
            this.Init(conn, User.SearchPattern.ServerClassName, args);
        }
        
        /// <summary>Constructor that wraps the %New class method</summary>
        public SearchPattern(InterSystems.Data.CacheClient.CacheConnection conn) {
            this.Init(conn, User.SearchPattern.ServerClassName);
        }
        
        /// <summary>
        /// Projection of property action
        /// </summary>
        public virtual string action {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("action", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("action", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property compare
        /// </summary>
        public virtual string compare {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("compare", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("compare", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of property regexp
        /// </summary>
        public virtual string regexp {
            get {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.SetReturnType(this.Connection, InterSystems.Data.CacheTypes.ClientTypeId.tString);
                        this.GetPropertyS("regexp", mtdSignature);
                        return ((InterSystems.Data.CacheTypes.CacheStringReturnValue)(mtdSignature.ReturnValue)).Value;
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
            set {
                try {
                    System.Threading.Monitor.Enter(this.Connection);
                    this.AssertIsConnected();
                    this.Connection.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                    InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = this.Connection.GetMtdSignature();
                    try {
                        mtdSignature.Add(value, false);
                        this.SetPropertyS("regexp", mtdSignature);
                    }
                    finally {
                        mtdSignature.Clear();
                        this.Connection.PostProcessing();
                    }
                }
                finally {
                    System.Threading.Monitor.Exit(this.Connection);
                }
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus IDKEYDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    User.SearchPattern.RunClassMethodS(conn, User.SearchPattern.ServerClassName, "IDKEYDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYExists
        /// </summary>
        public static System.Nullable<bool> IDKEYExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    User.SearchPattern.RunClassMethodS(conn, User.SearchPattern.ServerClassName, "IDKEYExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method IDKEYOpen
        /// </summary>
        public static User.SearchPattern IDKEYOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(User.SearchPattern));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    User.SearchPattern.RunClassMethodS(conn, User.SearchPattern.ServerClassName, "IDKEYOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((User.SearchPattern)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method create
        /// </summary>
        public static User.SearchPattern create(InterSystems.Data.CacheClient.CacheConnection conn, string r, string c, string a) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(User.SearchPattern));
                    mtdSignature.Add(r, false);
                    mtdSignature.Add(c, false);
                    mtdSignature.Add(a, false);
                    User.SearchPattern.RunClassMethodS(conn, User.SearchPattern.ServerClassName, "create", mtdSignature);
                    return ((User.SearchPattern)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method delete
        /// </summary>
        public static User.SearchPattern delete(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(User.SearchPattern));
                    mtdSignature.Add(id, false);
                    User.SearchPattern.RunClassMethodS(conn, User.SearchPattern.ServerClassName, "delete", mtdSignature);
                    return ((User.SearchPattern)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method read
        /// </summary>
        public static User.SearchPattern read(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(User.SearchPattern));
                    mtdSignature.Add(id, false);
                    User.SearchPattern.RunClassMethodS(conn, User.SearchPattern.ServerClassName, "read", mtdSignature);
                    return ((User.SearchPattern)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method regexpIndexDelete
        /// </summary>
        public static InterSystems.Data.CacheTypes.CacheStatus regexpIndexDelete(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tStatus);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    User.SearchPattern.RunClassMethodS(conn, User.SearchPattern.ServerClassName, "regexpIndexDelete", mtdSignature);
                    return ((InterSystems.Data.CacheTypes.CacheStatusReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method regexpIndexExists
        /// </summary>
        public static System.Nullable<bool> regexpIndexExists(InterSystems.Data.CacheClient.CacheConnection conn, string K1, ref string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tBool);
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(id, true);
                    User.SearchPattern.RunClassMethodS(conn, User.SearchPattern.ServerClassName, "regexpIndexExists", mtdSignature);
                    id = ((InterSystems.Data.CacheTypes.CacheStringArgument)(mtdSignature.Arguments[1])).Value;
                    return ((InterSystems.Data.CacheTypes.CacheBooleanReturnValue)(mtdSignature.ReturnValue)).Value;
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method regexpIndexOpen
        /// </summary>
        public static User.SearchPattern regexpIndexOpen(InterSystems.Data.CacheClient.CacheConnection conn, string K1, System.Nullable<long> concurrency, ref InterSystems.Data.CacheTypes.CacheStatus sc) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, typeof(User.SearchPattern));
                    mtdSignature.Add(K1, false);
                    mtdSignature.Add(concurrency, false);
                    mtdSignature.Add(sc, conn, true);
                    User.SearchPattern.RunClassMethodS(conn, User.SearchPattern.ServerClassName, "regexpIndexOpen", mtdSignature);
                    sc = ((InterSystems.Data.CacheTypes.CacheStatusArgument)(mtdSignature.Arguments[2])).Value;
                    return ((User.SearchPattern)(((InterSystems.Data.CacheTypes.CacheObjReturnValue)(mtdSignature.ReturnValue)).Value));
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>
        /// Projection of method update
        /// </summary>
        public static void update(InterSystems.Data.CacheClient.CacheConnection conn, System.Nullable<long> id, string r, string c, string a) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                InterSystems.Data.CacheTypes.CacheMethodSignature mtdSignature = conn.GetMtdSignature();
                try {
                    mtdSignature.SetReturnType(conn, InterSystems.Data.CacheTypes.ClientTypeId.tVoid);
                    mtdSignature.Add(id, false);
                    mtdSignature.Add(r, false);
                    mtdSignature.Add(c, false);
                    mtdSignature.Add(a, false);
                    User.SearchPattern.RunClassMethodS(conn, User.SearchPattern.ServerClassName, "update", mtdSignature);
                }
                finally {
                    mtdSignature.Clear();
                    conn.PostProcessing();
                }
            }
            finally {
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.SearchPattern Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.SearchPattern)(conn.OpenProxyObj(User.SearchPattern.ServerClassName, id, concurrency, typeof(User.SearchPattern), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.SearchPattern Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.SearchPattern)(conn.OpenProxyObj(User.SearchPattern.ServerClassName, id, typeof(User.SearchPattern), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.SearchPattern Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.SearchPattern)(conn.OpenProxyObj(User.SearchPattern.ServerClassName, id, typeof(User.SearchPattern))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.SearchPattern Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.SearchPattern)(conn.OpenProxyObj(User.SearchPattern.ServerClassName, id, concurrency, timeout, typeof(User.SearchPattern), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.SearchPattern Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.SearchPattern)(conn.OpenProxyObj(User.SearchPattern.ServerClassName, id, concurrency, typeof(User.SearchPattern), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.SearchPattern Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.SearchPattern)(conn.OpenProxyObj(User.SearchPattern.ServerClassName, id, concurrency, timeout, typeof(User.SearchPattern), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %Open()</summary>
        public static User.SearchPattern Open(InterSystems.Data.CacheClient.CacheConnection conn, byte[] id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.SearchPattern)(conn.OpenProxyObj(User.SearchPattern.ServerClassName, id, typeof(User.SearchPattern), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.SearchPattern OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.SearchPattern)(conn.OpenProxyObj(User.SearchPattern.ServerClassName, id, concurrency, typeof(User.SearchPattern), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.SearchPattern OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.SearchPattern)(conn.OpenProxyObj(User.SearchPattern.ServerClassName, id, typeof(User.SearchPattern), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.SearchPattern OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.SearchPattern)(conn.OpenProxyObj(User.SearchPattern.ServerClassName, id, typeof(User.SearchPattern))));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.SearchPattern OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.SearchPattern)(conn.OpenProxyObj(User.SearchPattern.ServerClassName, id, concurrency, timeout, typeof(User.SearchPattern), out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.SearchPattern OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.SearchPattern)(conn.OpenProxyObj(User.SearchPattern.ServerClassName, id, concurrency, typeof(User.SearchPattern), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.SearchPattern OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, int concurrency, int timeout, System.Collections.IEnumerable propertyPaths, out InterSystems.Data.CacheTypes.CacheStatus status) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.SearchPattern)(conn.OpenProxyObj(User.SearchPattern.ServerClassName, id, concurrency, timeout, typeof(User.SearchPattern), propertyPaths, out status)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %OpenId()</summary>
        public static User.SearchPattern OpenId(InterSystems.Data.CacheClient.CacheConnection conn, string id, System.Collections.IEnumerable propertyPaths) {
            try {
                System.Threading.Monitor.Enter(conn);
                conn.GeneratedAssembly = System.Reflection.Assembly.GetExecutingAssembly();
                return ((User.SearchPattern)(conn.OpenProxyObj(User.SearchPattern.ServerClassName, id, typeof(User.SearchPattern), propertyPaths)));
            }
            finally {
                conn.PostProcessing();
                System.Threading.Monitor.Exit(conn);
            }
        }
        
        /// <summary>Projection of %ExistsId()</summary>
        public static System.Nullable<bool> ExistsId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return User.SearchPattern.ExistsIdInternal(conn, User.SearchPattern.ServerClassName, id);
        }
        
        /// <summary>Projection of %DeleteId()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus DeleteId(InterSystems.Data.CacheClient.CacheConnection conn, string id) {
            return User.SearchPattern.DeleteIdInternal(conn, User.SearchPattern.ServerClassName, id);
        }
        
        /// <summary>Projection of %KillExtent()</summary>
        public static InterSystems.Data.CacheTypes.CacheStatus KillExtent(InterSystems.Data.CacheClient.CacheConnection conn) {
            return User.SearchPattern.KillExtentInternal(conn, User.SearchPattern.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public static void AddToRuntimeMetaInfoClassList(System.Collections.Generic.List<string> list) {
            list.Add(User.SearchPattern.ServerClassName);
        }
        
        /// <summary>Internal API</summary>
        public override void AddToRuntimeMetaInfoClassListWrapper(System.Collections.Generic.List<string> list) {
            User.SearchPattern.AddToRuntimeMetaInfoClassList(list);
        }
        
        /// <summary>Internal API</summary>
        public static void ValidateRuntimeMetaInfo(InterSystems.Data.CacheClient.CacheConnection conn) {
            InterSystems.Data.CacheClient.ObjBind.MetaInfo.GenRuntimeClassDef metaInfo = conn.GetGenRuntimeClassDef(User.SearchPattern.ServerClassName);
            if (metaInfo.Validate(User.SearchPattern.ClassCheckSum, User.SearchPattern.PropertyInfoColn, User.SearchPattern.CheckSumMethodDict, User.SearchPattern.CheckSumQueryDict, User.SearchPattern.GetAllPropertiesInfoColn())) {
                return;
            }
        }
        
        /// <summary>Internal API</summary>
        public override void ValidateRuntimeMetaInfoWrapper(InterSystems.Data.CacheClient.CacheConnection conn) {
            User.SearchPattern.ValidateRuntimeMetaInfo(conn);
        }
        
        /// <summary>Internal API</summary>
        protected static System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo> GetAllPropertiesInfoColn() {
            if ((User.SearchPattern.AllPropertiesInfoColn != null)) {
                return User.SearchPattern.AllPropertiesInfoColn;
            }
            User.SearchPattern.AllPropertiesInfoColn = new System.Collections.Generic.List<InterSystems.Data.CacheClient.ObjBind.MetaInfo.PropertyInfo>(User.SearchPattern.PropertyInfoColn);
            return User.SearchPattern.AllPropertiesInfoColn;
        }
        
        /// <summary>Class server name</summary>
        public override string ClassServerName() {
            return User.SearchPattern.ServerClassName;
        }
        
        /// <summary>Internal API</summary>
        public override bool IsClassGeneratedImpl() {
            return true;
        }
    }
}
